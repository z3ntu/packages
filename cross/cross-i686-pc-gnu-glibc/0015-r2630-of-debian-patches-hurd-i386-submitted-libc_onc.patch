Needed for HEAD and glibc-2_7-branch.

Patch originally by Thomas Schwinge.  Later rewritten by Debian's Aurelien
Jarno because of upstream glibc code changes.

Reported at <http://savannah.gnu.org/bugs/?18217> and
<http://sourceware.org/bugzilla/show_bug.cgi?id=3748>, where it was rejected by
Ulrich Drepper.  Roland promised to have a look.


r2630 of debian/patches/hurd-i386/submitted-libc_once.diff.

2006-12-18  Thomas Schwinge  <tschwinge@gnu.org>

	* bits/libc-lock.h (__libc_once_else): New definiton.
	* sysdeps/mach/bits/libc-lock.h: Likewise.
	* sysdeps/mach/hurd/bits/libc-lock.h: Likewise.
	* nptl/sysdeps/pthread/bits/libc-lock.h: Likewise.
	* sysdeps/posix/getaddrinfo.c (getaddrinfo): Use __libc_once_else and a
	new local function instead of using implementational details.

Date: 2007-10-28 19:40:34 +0000 (Sun, 28 Oct 2007)
New Revision: 2630

2007-10-28  Aurelien Jarno  <aurelien@aurel32.net>

	* bits/libc-lock.h (__libc_once_get): New definiton.
	* linuxthreads/sysdeps/pthread/bits/libc-lock.h: Likewise
	* nptl/sysdeps/pthread/bits/libc-lock.h: Likewise.
	* sysdeps/mach/bits/libc-lock.h: Likewise.
	* sysdeps/mach/hurd/bits/libc-lock.h: Likewise.
	* sysdeps/posix/getaddrinfo.c (getaddrinfo): Use __libc_once_get
	instead of using implementational details.

---
 bits/libc-lock.h                      |    3 +++
 nptl/sysdeps/pthread/bits/libc-lock.h |    3 +++
 sysdeps/mach/hurd/bits/libc-lock.h    |    4 ++++
 sysdeps/posix/getaddrinfo.c           |    2 +-
 4 files changed, 11 insertions(+), 1 deletions(-)

diff --git a/bits/libc-lock.h b/bits/libc-lock.h
index 3f9c211..a307f8c 100644
--- a/bits/libc-lock.h
+++ b/bits/libc-lock.h
@@ -98,6 +98,9 @@
     }									      \
   } while (0)
 
+/* Get once control variable.  */
+#define __libc_once_get(ONCE_CONTROL) \
+  ((ONCE_CONTROL) == 1)
 
 /* Start a critical region with a cleanup function */
 #define __libc_cleanup_region_start(DOIT, FCT, ARG)			    \
diff --git a/nptl/sysdeps/pthread/bits/libc-lock.h b/nptl/sysdeps/pthread/bits/libc-lock.h
index a597f3b..0e5207c 100644
--- a/nptl/sysdeps/pthread/bits/libc-lock.h
+++ b/nptl/sysdeps/pthread/bits/libc-lock.h
@@ -377,6 +377,9 @@ typedef pthread_key_t __libc_key_t;
     }									      \
   } while (0)
 
+/* Get once control variable.  */
+#define __libc_once_get(ONCE_CONTROL) \
+  ((ONCE_CONTROL) != PTHREAD_ONCE_INIT)
 
 /* Note that for I/O cleanup handling we are using the old-style
    cancel handling.  It does not have to be integrated with C++ snce
diff --git a/sysdeps/mach/hurd/bits/libc-lock.h b/sysdeps/mach/hurd/bits/libc-lock.h
index 0fa90bc..0ea68e0 100644
--- a/sysdeps/mach/hurd/bits/libc-lock.h
+++ b/sysdeps/mach/hurd/bits/libc-lock.h
@@ -185,6 +185,10 @@ struct __libc_once
     __libc_lock_unlock (ONCE_CONTROL.lock);				      \
   } while (0)
 
+/* Get once control variable.  */
+#define __libc_once_get(ONCE_CONTROL) \
+  (!ONCE_CONTROL.done)
+
 #ifdef _LIBC
 /* We need portable names for some functions.  E.g., when they are
    used as argument to __libc_cleanup_region_start.  */
diff --git a/sysdeps/posix/getaddrinfo.c b/sysdeps/posix/getaddrinfo.c
index 8cf9c6b..63d8ded 100644
--- a/sysdeps/posix/getaddrinfo.c
+++ b/sysdeps/posix/getaddrinfo.c
@@ -2064,7 +2064,7 @@ getaddrinfo (const char *name, const char *service,
 	  __libc_lock_define_initialized (static, lock);
 
 	  __libc_lock_lock (lock);
-	  if (old_once && gaiconf_reload_flag)
+	  if (__libc_once_get(old_once) && gaiconf_reload_flag)
 	    gaiconf_reload ();
 	  qsort (results, nresults, sizeof (results[0]), rfc3484_sort);
 	  __libc_lock_unlock (lock);
